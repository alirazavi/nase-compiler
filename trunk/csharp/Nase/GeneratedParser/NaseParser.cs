// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.4.5
// Machine:  DARKONE-L
// DateTime: 29.11.2011 14:12:30
// UserName: darkone
// Input file <NaseParser.y - 29.11.2011 13:49:20>

// options: lines

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Nase.Files;
using Nase.Syntax;

namespace Nase.GeneratedParser
{
public enum Symbol {
    error=1,EOF=2,NULL_SYMBOL=3,BEGIN_SYMBOL=4,END_SYMBOL=5,DELIMITER_SYMBOL=6,
    COMMA_SYMBOL=7,INT_TYPE_SYMBOL=8,BOOL_TYPE_SYMBOL=9,READ_SYMBOL=10,WRITE_SYMBOL=11,ASSIGN_SYMBOL=12,
    OPEN_PARENTHESIS_SYMBOL=13,CLOSE_PARENTHESIS_SYMBOL=14,INLINE_IF_SYMBOL=15,INLINE_THEN_SYMBOL=16,INLINE_ELSE_SYMBOL=17,INLINE_FI_SYMBOL=18,
    PLUS_SYMBOL=19,MINUS_SYMBOL=20,TIMES_SYMBOL=21,DIVIDE_SYMBOL=22,MODULO_SYMBOL=23,LT_SYMBOL=24,
    LE_SYMBOL=25,EQ_SYMBOL=26,GE_SYMBOL=27,GT_SYMBOL=28,NE_SYMBOL=29,AND_SYMBOL=30,
    OR_SYMBOL=31,NOT_SYMBOL=32,TRUE_SYMBOL=33,FALSE_SYMBOL=34,IDENTIFIER_SYMBOL=35,INTEGER_LITERAL_SYMBOL=36};

public partial struct ValueType
#line 9 "NaseParser.y"
{ public Symbol symbol;
#line 10 "NaseParser.y"
         public SyntaxTreeNode node;
#line 11 "NaseParser.y"
         public List<Symbol> symbolList; }
public partial class NaseParser: ShiftReduceParser<ValueType, FilePosition>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[60];
  private static State[] states = new State[105];
  private static string[] nonTerms = new string[] {
      "integer", "program", "declarationSequence", "blockSequence", "block", 
      "statementSequence", "statement", "declaration", "declarationRec", "assignment", 
      "read", "write", "typeName", "intExpr", "intTerm", "intTermSecondary", 
      "intFactor", "boolExpr", "boolTerm", "boolTermSecondary", "boolFactor", 
      "comparisonExpr", "inlineIfStatement", "identifier", "$accept", };

  static NaseParser() {
    states[0] = new State(new int[]{8,22,9,23,4,9},new int[]{-2,1,-3,3,-8,100,-13,16,-4,103,-5,6});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{4,9},new int[]{-4,4,-5,6});
    states[4] = new State(new int[]{2,5});
    states[5] = new State(-2);
    states[6] = new State(new int[]{6,7});
    states[7] = new State(new int[]{4,9,2,-7},new int[]{-4,8,-5,6});
    states[8] = new State(-6);
    states[9] = new State(new int[]{8,22,9,23,4,9,35,44,10,93,11,97},new int[]{-6,10,-7,12,-8,14,-13,16,-5,24,-10,25,-24,27,-11,91,-12,95});
    states[10] = new State(new int[]{5,11});
    states[11] = new State(-8);
    states[12] = new State(new int[]{8,22,9,23,4,9,35,44,10,93,11,97,5,-10},new int[]{-6,13,-7,12,-8,14,-13,16,-5,24,-10,25,-24,27,-11,91,-12,95});
    states[13] = new State(-9);
    states[14] = new State(new int[]{6,15});
    states[15] = new State(-11);
    states[16] = new State(new int[]{35,17});
    states[17] = new State(new int[]{7,19,6,-17},new int[]{-9,18});
    states[18] = new State(-16);
    states[19] = new State(new int[]{35,20});
    states[20] = new State(new int[]{7,19,6,-19},new int[]{-9,21});
    states[21] = new State(-18);
    states[22] = new State(-20);
    states[23] = new State(-21);
    states[24] = new State(-12);
    states[25] = new State(new int[]{6,26});
    states[26] = new State(-13);
    states[27] = new State(new int[]{12,28});
    states[28] = new State(new int[]{20,35,36,42,35,44,13,79,15,49,32,59,33,64,34,65},new int[]{-14,29,-18,90,-15,32,-16,40,-17,37,-1,41,-24,66,-23,48,-19,56,-20,83,-21,61,-22,67});
    states[29] = new State(new int[]{24,30,25,69,26,71,27,73,28,75,29,77,6,-22});
    states[30] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-14,31,-15,32,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[31] = new State(-49);
    states[32] = new State(new int[]{19,33,20,88,24,-26,25,-26,26,-26,27,-26,28,-26,29,-26,6,-26,30,-26,31,-26,16,-26,14,-26,17,-26,18,-26});
    states[33] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-14,34,-15,32,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[34] = new State(-24);
    states[35] = new State(new int[]{36,42,35,44,13,45,15,49},new int[]{-16,36,-17,37,-1,41,-24,43,-23,48});
    states[36] = new State(-27);
    states[37] = new State(new int[]{21,38,22,84,23,86,19,-32,20,-32,24,-32,25,-32,26,-32,27,-32,28,-32,29,-32,6,-32,30,-32,31,-32,16,-32,14,-32,17,-32,18,-32});
    states[38] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-15,39,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[39] = new State(-29);
    states[40] = new State(-28);
    states[41] = new State(-33);
    states[42] = new State(-56);
    states[43] = new State(-34);
    states[44] = new State(-55);
    states[45] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-14,46,-15,32,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[46] = new State(new int[]{14,47});
    states[47] = new State(-35);
    states[48] = new State(-36);
    states[49] = new State(new int[]{32,59,33,64,34,65,35,44,20,35,36,42,13,79,15,49},new int[]{-18,50,-19,56,-20,83,-21,61,-24,66,-22,67,-14,68,-15,32,-16,40,-17,37,-1,41,-23,48});
    states[50] = new State(new int[]{16,51});
    states[51] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-14,52,-15,32,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[52] = new State(new int[]{17,53});
    states[53] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-14,54,-15,32,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[54] = new State(new int[]{18,55});
    states[55] = new State(-37);
    states[56] = new State(new int[]{31,57,6,-39,16,-39,14,-39});
    states[57] = new State(new int[]{32,59,33,64,34,65,35,44,20,35,36,42,13,79,15,49},new int[]{-18,58,-19,56,-20,83,-21,61,-24,66,-22,67,-14,68,-15,32,-16,40,-17,37,-1,41,-23,48});
    states[58] = new State(-38);
    states[59] = new State(new int[]{33,64,34,65,35,44,20,35,36,42,13,79,15,49},new int[]{-20,60,-21,61,-24,66,-22,67,-14,68,-15,32,-16,40,-17,37,-1,41,-23,48});
    states[60] = new State(-40);
    states[61] = new State(new int[]{30,62,31,-43,6,-43,16,-43,14,-43});
    states[62] = new State(new int[]{33,64,34,65,35,44,20,35,36,42,13,79,15,49},new int[]{-20,63,-21,61,-24,66,-22,67,-14,68,-15,32,-16,40,-17,37,-1,41,-23,48});
    states[63] = new State(-42);
    states[64] = new State(-44);
    states[65] = new State(-45);
    states[66] = new State(new int[]{30,-46,31,-46,6,-34,16,-46,14,-34,21,-34,22,-34,23,-34,19,-34,20,-34,24,-34,25,-34,26,-34,27,-34,28,-34,29,-34});
    states[67] = new State(-47);
    states[68] = new State(new int[]{24,30,25,69,26,71,27,73,28,75,29,77});
    states[69] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-14,70,-15,32,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[70] = new State(-50);
    states[71] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-14,72,-15,32,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[72] = new State(-51);
    states[73] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-14,74,-15,32,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[74] = new State(-52);
    states[75] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-14,76,-15,32,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[76] = new State(-53);
    states[77] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-14,78,-15,32,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[78] = new State(-54);
    states[79] = new State(new int[]{20,35,36,42,35,44,13,79,15,49,32,59,33,64,34,65},new int[]{-14,80,-18,81,-15,32,-16,40,-17,37,-1,41,-24,66,-23,48,-19,56,-20,83,-21,61,-22,67});
    states[80] = new State(new int[]{14,47,24,30,25,69,26,71,27,73,28,75,29,77});
    states[81] = new State(new int[]{14,82});
    states[82] = new State(-48);
    states[83] = new State(-41);
    states[84] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-15,85,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[85] = new State(-30);
    states[86] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-15,87,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[87] = new State(-31);
    states[88] = new State(new int[]{20,35,36,42,35,44,13,45,15,49},new int[]{-14,89,-15,32,-16,40,-17,37,-1,41,-24,43,-23,48});
    states[89] = new State(-25);
    states[90] = new State(-23);
    states[91] = new State(new int[]{6,92});
    states[92] = new State(-14);
    states[93] = new State(new int[]{35,44},new int[]{-24,94});
    states[94] = new State(-57);
    states[95] = new State(new int[]{6,96});
    states[96] = new State(-15);
    states[97] = new State(new int[]{20,35,36,42,35,44,13,79,15,49,32,59,33,64,34,65},new int[]{-14,98,-18,99,-15,32,-16,40,-17,37,-1,41,-24,66,-23,48,-19,56,-20,83,-21,61,-22,67});
    states[98] = new State(new int[]{24,30,25,69,26,71,27,73,28,75,29,77,6,-58});
    states[99] = new State(-59);
    states[100] = new State(new int[]{6,101});
    states[101] = new State(new int[]{8,22,9,23,4,-5},new int[]{-3,102,-8,100,-13,16});
    states[102] = new State(-4);
    states[103] = new State(new int[]{2,104});
    states[104] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-25, new int[]{-2,2});
    rules[2] = new Rule(-2, new int[]{-3,-4,2});
    rules[3] = new Rule(-2, new int[]{-4,2});
    rules[4] = new Rule(-3, new int[]{-8,6,-3});
    rules[5] = new Rule(-3, new int[]{-8,6});
    rules[6] = new Rule(-4, new int[]{-5,6,-4});
    rules[7] = new Rule(-4, new int[]{-5,6});
    rules[8] = new Rule(-5, new int[]{4,-6,5});
    rules[9] = new Rule(-6, new int[]{-7,-6});
    rules[10] = new Rule(-6, new int[]{-7});
    rules[11] = new Rule(-7, new int[]{-8,6});
    rules[12] = new Rule(-7, new int[]{-5});
    rules[13] = new Rule(-7, new int[]{-10,6});
    rules[14] = new Rule(-7, new int[]{-11,6});
    rules[15] = new Rule(-7, new int[]{-12,6});
    rules[16] = new Rule(-8, new int[]{-13,35,-9});
    rules[17] = new Rule(-8, new int[]{-13,35});
    rules[18] = new Rule(-9, new int[]{7,35,-9});
    rules[19] = new Rule(-9, new int[]{7,35});
    rules[20] = new Rule(-13, new int[]{8});
    rules[21] = new Rule(-13, new int[]{9});
    rules[22] = new Rule(-10, new int[]{-24,12,-14});
    rules[23] = new Rule(-10, new int[]{-24,12,-18});
    rules[24] = new Rule(-14, new int[]{-15,19,-14});
    rules[25] = new Rule(-14, new int[]{-15,20,-14});
    rules[26] = new Rule(-14, new int[]{-15});
    rules[27] = new Rule(-15, new int[]{20,-16});
    rules[28] = new Rule(-15, new int[]{-16});
    rules[29] = new Rule(-16, new int[]{-17,21,-15});
    rules[30] = new Rule(-16, new int[]{-17,22,-15});
    rules[31] = new Rule(-16, new int[]{-17,23,-15});
    rules[32] = new Rule(-16, new int[]{-17});
    rules[33] = new Rule(-17, new int[]{-1});
    rules[34] = new Rule(-17, new int[]{-24});
    rules[35] = new Rule(-17, new int[]{13,-14,14});
    rules[36] = new Rule(-17, new int[]{-23});
    rules[37] = new Rule(-23, new int[]{15,-18,16,-14,17,-14,18});
    rules[38] = new Rule(-18, new int[]{-19,31,-18});
    rules[39] = new Rule(-18, new int[]{-19});
    rules[40] = new Rule(-19, new int[]{32,-20});
    rules[41] = new Rule(-19, new int[]{-20});
    rules[42] = new Rule(-20, new int[]{-21,30,-20});
    rules[43] = new Rule(-20, new int[]{-21});
    rules[44] = new Rule(-21, new int[]{33});
    rules[45] = new Rule(-21, new int[]{34});
    rules[46] = new Rule(-21, new int[]{-24});
    rules[47] = new Rule(-21, new int[]{-22});
    rules[48] = new Rule(-21, new int[]{13,-18,14});
    rules[49] = new Rule(-22, new int[]{-14,24,-14});
    rules[50] = new Rule(-22, new int[]{-14,25,-14});
    rules[51] = new Rule(-22, new int[]{-14,26,-14});
    rules[52] = new Rule(-22, new int[]{-14,27,-14});
    rules[53] = new Rule(-22, new int[]{-14,28,-14});
    rules[54] = new Rule(-22, new int[]{-14,29,-14});
    rules[55] = new Rule(-24, new int[]{35});
    rules[56] = new Rule(-1, new int[]{36});
    rules[57] = new Rule(-11, new int[]{10,-24});
    rules[58] = new Rule(-12, new int[]{11,-14});
    rules[59] = new Rule(-12, new int[]{11,-18});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Symbol.error, (int)Symbol.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> declarationSequence, blockSequence, EOF
#line 66 "NaseParser.y"
{
#line 67 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeProgramNode(CurrentLocationSpan, new SyntaxTreeSequenceNode(LocationStack[LocationStack.Depth-3], ValueStack[ValueStack.Depth-3].node, new SyntaxTreeSequenceNode(LocationStack[LocationStack.Depth-2], ValueStack[ValueStack.Depth-2].node, null)));
#line 68 "NaseParser.y"
                SyntaxTree = new SyntaxTree(CurrentSemanticValue.node);
#line 69 "NaseParser.y"
            }
        break;
      case 3: // program -> blockSequence, EOF
#line 71 "NaseParser.y"
{
#line 72 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeProgramNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].node);
#line 73 "NaseParser.y"
                SyntaxTree = new SyntaxTree(CurrentSemanticValue.node);
#line 74 "NaseParser.y"
            }
        break;
      case 4: // declarationSequence -> declaration, DELIMITER_SYMBOL, declarationSequence
#line 79 "NaseParser.y"
{
#line 80 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 81 "NaseParser.y"
            }
        break;
      case 5: // declarationSequence -> declaration, DELIMITER_SYMBOL
#line 83 "NaseParser.y"
{
#line 84 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].node, null);
#line 85 "NaseParser.y"
            }
        break;
      case 6: // blockSequence -> block, DELIMITER_SYMBOL, blockSequence
#line 90 "NaseParser.y"
{
#line 91 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 92 "NaseParser.y"
            }
        break;
      case 7: // blockSequence -> block, DELIMITER_SYMBOL
#line 94 "NaseParser.y"
{
#line 95 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].node, null);
#line 96 "NaseParser.y"
            }
        break;
      case 8: // block -> BEGIN_SYMBOL, statementSequence, END_SYMBOL
#line 101 "NaseParser.y"
{
#line 102 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;
#line 103 "NaseParser.y"
            }
        break;
      case 9: // statementSequence -> statement, statementSequence
#line 108 "NaseParser.y"
{
#line 109 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].node, ValueStack[ValueStack.Depth-1].node);
#line 110 "NaseParser.y"
            }
        break;
      case 10: // statementSequence -> statement
#line 112 "NaseParser.y"
{
#line 113 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].node, null);
#line 114 "NaseParser.y"
            }
        break;
      case 11: // statement -> declaration, DELIMITER_SYMBOL
#line 119 "NaseParser.y"
{
#line 120 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;
#line 121 "NaseParser.y"
            }
        break;
      case 12: // statement -> block
#line 123 "NaseParser.y"
{
#line 124 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 125 "NaseParser.y"
            }
        break;
      case 13: // statement -> assignment, DELIMITER_SYMBOL
#line 127 "NaseParser.y"
{
#line 128 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;
#line 129 "NaseParser.y"
            }
        break;
      case 14: // statement -> read, DELIMITER_SYMBOL
#line 131 "NaseParser.y"
{
#line 132 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;
#line 133 "NaseParser.y"
            }
        break;
      case 15: // statement -> write, DELIMITER_SYMBOL
#line 135 "NaseParser.y"
{
#line 136 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;
#line 137 "NaseParser.y"
            }
        break;
      case 16: // declaration -> typeName, IDENTIFIER_SYMBOL, declarationRec
#line 142 "NaseParser.y"
{
#line 143 "NaseParser.y"
                SyntaxTreeDeclarationNode declNode = null;
#line 144 "NaseParser.y"
                SyntaxTreeSequenceNode seqNode = null;
#line 145 "NaseParser.y"

#line 146 "NaseParser.y"
                var firstDeclNode = new SyntaxTreeDeclarationNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-2].symbol);
#line 147 "NaseParser.y"
                this._symbolTable.SetDeclarationNodeLinkToSymbol(ValueStack[ValueStack.Depth-2].symbol, firstDeclNode);
#line 148 "NaseParser.y"

#line 149 "NaseParser.y"
                foreach(Symbol s in ValueStack[ValueStack.Depth-1].symbolList)
#line 150 "NaseParser.y"
                {
#line 151 "NaseParser.y"
                    declNode = new SyntaxTreeDeclarationNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].node, s);
#line 152 "NaseParser.y"
                    this._symbolTable.SetDeclarationNodeLinkToSymbol(s, declNode);
#line 153 "NaseParser.y"
                    seqNode = new SyntaxTreeSequenceNode(CurrentLocationSpan, declNode, seqNode);
#line 154 "NaseParser.y"
                }
#line 155 "NaseParser.y"

#line 156 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, firstDeclNode, seqNode);
#line 157 "NaseParser.y"
            }
        break;
      case 17: // declaration -> typeName, IDENTIFIER_SYMBOL
#line 159 "NaseParser.y"
{
#line 160 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDeclarationNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].node, ValueStack[ValueStack.Depth-1].symbol);
#line 161 "NaseParser.y"
                this._symbolTable.SetDeclarationNodeLinkToSymbol(ValueStack[ValueStack.Depth-1].symbol, CurrentSemanticValue.node);
#line 162 "NaseParser.y"
            }
        break;
      case 18: // declarationRec -> COMMA_SYMBOL, IDENTIFIER_SYMBOL, declarationRec
#line 167 "NaseParser.y"
{
#line 168 "NaseParser.y"
                CurrentSemanticValue.symbolList = ValueStack[ValueStack.Depth-1].symbolList;
#line 169 "NaseParser.y"
                CurrentSemanticValue.symbolList.Add(ValueStack[ValueStack.Depth-2].symbol);
#line 170 "NaseParser.y"
            }
        break;
      case 19: // declarationRec -> COMMA_SYMBOL, IDENTIFIER_SYMBOL
#line 172 "NaseParser.y"
{
#line 173 "NaseParser.y"
                CurrentSemanticValue.symbolList = new List<Symbol>();
#line 174 "NaseParser.y"
                CurrentSemanticValue.symbolList.Add(ValueStack[ValueStack.Depth-1].symbol);
#line 175 "NaseParser.y"
            }
        break;
      case 20: // typeName -> INT_TYPE_SYMBOL
#line 180 "NaseParser.y"
{
#line 181 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeTypeNode(CurrentLocationSpan, Symbol.INT_TYPE_SYMBOL);
#line 182 "NaseParser.y"
            }
        break;
      case 21: // typeName -> BOOL_TYPE_SYMBOL
#line 184 "NaseParser.y"
{
#line 185 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeTypeNode(CurrentLocationSpan, Symbol.BOOL_TYPE_SYMBOL);
#line 186 "NaseParser.y"
            }
        break;
      case 22: // assignment -> identifier, ASSIGN_SYMBOL, intExpr
#line 191 "NaseParser.y"
{
#line 192 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeAssignmentNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 193 "NaseParser.y"
            }
        break;
      case 23: // assignment -> identifier, ASSIGN_SYMBOL, boolExpr
#line 195 "NaseParser.y"
{
#line 196 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeAssignmentNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 197 "NaseParser.y"
            }
        break;
      case 24: // intExpr -> intTerm, PLUS_SYMBOL, intExpr
#line 202 "NaseParser.y"
{
#line 203 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.PLUS_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 204 "NaseParser.y"
            }
        break;
      case 25: // intExpr -> intTerm, MINUS_SYMBOL, intExpr
#line 206 "NaseParser.y"
{
#line 207 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.MINUS_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 208 "NaseParser.y"
            }
        break;
      case 26: // intExpr -> intTerm
#line 210 "NaseParser.y"
{
#line 211 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 212 "NaseParser.y"
            }
        break;
      case 27: // intTerm -> MINUS_SYMBOL, intTermSecondary
#line 217 "NaseParser.y"
{
#line 218 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeMonadicOpNode(CurrentLocationSpan, Symbol.MINUS_SYMBOL, ValueStack[ValueStack.Depth-1].node);
#line 219 "NaseParser.y"
            }
        break;
      case 28: // intTerm -> intTermSecondary
#line 221 "NaseParser.y"
{
#line 222 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 223 "NaseParser.y"
            }
        break;
      case 29: // intTermSecondary -> intFactor, TIMES_SYMBOL, intTerm
#line 228 "NaseParser.y"
{
#line 229 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.TIMES_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 230 "NaseParser.y"
            }
        break;
      case 30: // intTermSecondary -> intFactor, DIVIDE_SYMBOL, intTerm
#line 232 "NaseParser.y"
{
#line 233 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.DIVIDE_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 234 "NaseParser.y"
            }
        break;
      case 31: // intTermSecondary -> intFactor, MODULO_SYMBOL, intTerm
#line 236 "NaseParser.y"
{
#line 237 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.MODULO_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 238 "NaseParser.y"
            }
        break;
      case 32: // intTermSecondary -> intFactor
#line 240 "NaseParser.y"
{
#line 241 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 242 "NaseParser.y"
            }
        break;
      case 33: // intFactor -> integer
#line 247 "NaseParser.y"
{
#line 248 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 249 "NaseParser.y"
            }
        break;
      case 34: // intFactor -> identifier
#line 251 "NaseParser.y"
{
#line 252 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 253 "NaseParser.y"
            }
        break;
      case 35: // intFactor -> OPEN_PARENTHESIS_SYMBOL, intExpr, CLOSE_PARENTHESIS_SYMBOL
#line 255 "NaseParser.y"
{
#line 256 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;
#line 257 "NaseParser.y"
            }
        break;
      case 36: // intFactor -> inlineIfStatement
#line 259 "NaseParser.y"
{
#line 260 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 261 "NaseParser.y"
            }
        break;
      case 37: // inlineIfStatement -> INLINE_IF_SYMBOL, boolExpr, INLINE_THEN_SYMBOL, intExpr, 
               //                      INLINE_ELSE_SYMBOL, intExpr, INLINE_FI_SYMBOL
#line 266 "NaseParser.y"
{
#line 267 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeInlineIfNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-6].node, ValueStack[ValueStack.Depth-4].node, ValueStack[ValueStack.Depth-2].node);
#line 268 "NaseParser.y"
            }
        break;
      case 38: // boolExpr -> boolTerm, OR_SYMBOL, boolExpr
#line 273 "NaseParser.y"
{
#line 274 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.OR_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 275 "NaseParser.y"
            }
        break;
      case 39: // boolExpr -> boolTerm
#line 277 "NaseParser.y"
{
#line 278 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 279 "NaseParser.y"
            }
        break;
      case 40: // boolTerm -> NOT_SYMBOL, boolTermSecondary
#line 284 "NaseParser.y"
{
#line 285 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeMonadicOpNode(CurrentLocationSpan, Symbol.NOT_SYMBOL, ValueStack[ValueStack.Depth-1].node);
#line 286 "NaseParser.y"
            }
        break;
      case 41: // boolTerm -> boolTermSecondary
#line 288 "NaseParser.y"
{
#line 289 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 290 "NaseParser.y"
            }
        break;
      case 42: // boolTermSecondary -> boolFactor, AND_SYMBOL, boolTermSecondary
#line 295 "NaseParser.y"
{
#line 296 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.AND_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 297 "NaseParser.y"
            }
        break;
      case 43: // boolTermSecondary -> boolFactor
#line 299 "NaseParser.y"
{
#line 300 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 301 "NaseParser.y"
            }
        break;
      case 44: // boolFactor -> TRUE_SYMBOL
#line 306 "NaseParser.y"
{
#line 307 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeConstNode(CurrentLocationSpan, Symbol.TRUE_SYMBOL);
#line 308 "NaseParser.y"
            }
        break;
      case 45: // boolFactor -> FALSE_SYMBOL
#line 310 "NaseParser.y"
{
#line 311 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeConstNode(CurrentLocationSpan, Symbol.FALSE_SYMBOL);
#line 312 "NaseParser.y"
            }
        break;
      case 46: // boolFactor -> identifier
#line 314 "NaseParser.y"
{
#line 315 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 316 "NaseParser.y"
            }
        break;
      case 47: // boolFactor -> comparisonExpr
#line 318 "NaseParser.y"
{
#line 319 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 320 "NaseParser.y"
            }
        break;
      case 48: // boolFactor -> OPEN_PARENTHESIS_SYMBOL, boolExpr, CLOSE_PARENTHESIS_SYMBOL
#line 322 "NaseParser.y"
{
#line 323 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;
#line 324 "NaseParser.y"
            }
        break;
      case 49: // comparisonExpr -> intExpr, LT_SYMBOL, intExpr
#line 329 "NaseParser.y"
{
#line 330 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.LT_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 331 "NaseParser.y"
            }
        break;
      case 50: // comparisonExpr -> intExpr, LE_SYMBOL, intExpr
#line 333 "NaseParser.y"
{
#line 334 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.LE_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 335 "NaseParser.y"
            }
        break;
      case 51: // comparisonExpr -> intExpr, EQ_SYMBOL, intExpr
#line 337 "NaseParser.y"
{
#line 338 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.EQ_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 339 "NaseParser.y"
            }
        break;
      case 52: // comparisonExpr -> intExpr, GE_SYMBOL, intExpr
#line 341 "NaseParser.y"
{
#line 342 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.GE_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 343 "NaseParser.y"
            }
        break;
      case 53: // comparisonExpr -> intExpr, GT_SYMBOL, intExpr
#line 345 "NaseParser.y"
{
#line 346 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.GT_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 347 "NaseParser.y"
            }
        break;
      case 54: // comparisonExpr -> intExpr, NE_SYMBOL, intExpr
#line 349 "NaseParser.y"
{
#line 350 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.NE_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 351 "NaseParser.y"
            }
        break;
      case 55: // identifier -> IDENTIFIER_SYMBOL
#line 356 "NaseParser.y"
{
#line 357 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeIdentNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].symbol);
#line 358 "NaseParser.y"
            }
        break;
      case 56: // integer -> INTEGER_LITERAL_SYMBOL
#line 363 "NaseParser.y"
{
#line 364 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeConstNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].symbol);
#line 365 "NaseParser.y"
                this._symbolTable.SetDeclarationNodeLinkToSymbol(ValueStack[ValueStack.Depth-1].symbol, CurrentSemanticValue.node);
#line 366 "NaseParser.y"
            }
        break;
      case 57: // read -> READ_SYMBOL, identifier
#line 371 "NaseParser.y"
{
#line 372 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeReadNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].node);
#line 373 "NaseParser.y"
            }
        break;
      case 58: // write -> WRITE_SYMBOL, intExpr
#line 378 "NaseParser.y"
{
#line 379 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeWriteNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].node);
#line 380 "NaseParser.y"
            }
        break;
      case 59: // write -> WRITE_SYMBOL, boolExpr
#line 382 "NaseParser.y"
{
#line 383 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeWriteNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].node);
#line 384 "NaseParser.y"
            }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Symbol)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Symbol)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}

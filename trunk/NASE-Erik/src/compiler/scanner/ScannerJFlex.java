/* The following code was generated by JFlex 1.4.3 on 19.12.11 19:09 */


package compiler.scanner;

import java_cup.runtime.*;
import java.io.IOException;

import files.FileManager;

import symboltable.SymbolTable;
import symboltable.Symbols;
import static symboltable.Symbols.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19.12.11 19:09 from the specification file
 * <tt>C:/Dokumente und Einstellungen/student/workspace/NaseCompiler/trunk/NASE-Erik/src/compiler/scanner/ScannerJFlex.lex</tt>
 */
final class ScannerJFlex extends ScannerWrapper implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\36\1\2\2\0\1\1\22\0\1\36\3\0\1\35\1\13"+
    "\4\0\1\11\1\10\1\4\1\7\1\0\1\12\12\34\1\5\1\3"+
    "\1\0\1\6\3\0\1\24\1\14\1\33\1\21\1\15\1\25\1\16"+
    "\1\33\1\17\2\33\1\30\1\33\1\20\1\22\2\33\1\23\1\32"+
    "\1\27\1\31\1\33\1\26\3\33\6\0\1\24\1\14\1\33\1\21"+
    "\1\15\1\25\1\16\1\33\1\17\2\33\1\30\1\33\1\20\1\22"+
    "\2\33\1\23\1\32\1\27\1\31\1\33\1\26\3\33\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\12\12\1\13\1\1\1\14\1\15"+
    "\5\12\1\16\6\12\1\0\2\17\2\12\1\20\1\21"+
    "\2\12\1\22\1\23\6\12\1\24\2\12\1\25\1\26"+
    "\2\12\1\27\1\30\2\12\1\31\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\37\0\37\0\37\0\135\0\37"+
    "\0\37\0\37\0\37\0\37\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2\0\u01d1"+
    "\0\u01f0\0\37\0\u020f\0\u022e\0\u024d\0\u026c\0\u028b\0\272"+
    "\0\u02aa\0\u02c9\0\u02e8\0\u0307\0\u0326\0\u0345\0\u01d1\0\u01d1"+
    "\0\37\0\u0364\0\u0383\0\272\0\272\0\u03a2\0\u03c1\0\272"+
    "\0\272\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c\0\u047b\0\272"+
    "\0\u049a\0\u04b9\0\272\0\272\0\u04d8\0\u04f7\0\272\0\272"+
    "\0\u0516\0\u0535\0\272\0\272";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\2\17\1\21\1\22\1\23\1\24\1\25\1\26\4\17"+
    "\1\27\1\30\1\31\41\0\1\4\42\0\1\32\44\0"+
    "\1\17\1\33\4\17\1\34\12\17\16\0\4\17\1\35"+
    "\14\17\16\0\21\17\16\0\3\17\1\36\1\37\14\17"+
    "\16\0\7\17\1\40\11\17\16\0\1\17\1\41\17\17"+
    "\16\0\4\17\1\42\14\17\16\0\3\17\1\43\4\17"+
    "\1\44\10\17\16\0\7\17\1\45\11\17\16\0\7\17"+
    "\1\46\11\17\36\0\1\27\2\0\1\47\1\50\1\51"+
    "\34\47\36\0\1\31\14\0\2\17\1\52\16\17\16\0"+
    "\6\17\1\53\12\17\16\0\5\17\1\54\13\17\16\0"+
    "\11\17\1\55\7\17\16\0\13\17\1\56\5\17\16\0"+
    "\10\17\1\57\10\17\16\0\5\17\1\60\13\17\16\0"+
    "\3\17\1\61\15\17\16\0\14\17\1\62\4\17\16\0"+
    "\3\17\1\63\15\17\16\0\15\17\1\64\3\17\16\0"+
    "\3\17\1\65\15\17\16\0\14\17\1\66\4\17\16\0"+
    "\1\17\1\67\17\17\16\0\5\17\1\70\13\17\16\0"+
    "\16\17\1\71\2\17\16\0\13\17\1\72\5\17\16\0"+
    "\1\17\1\73\17\17\16\0\4\17\1\74\14\17\16\0"+
    "\1\17\1\75\17\17\16\0\2\17\1\76\16\17\16\0"+
    "\1\17\1\77\17\17\16\0\1\17\1\100\17\17\16\0"+
    "\10\17\1\101\10\17\16\0\1\17\1\102\17\17\16\0"+
    "\4\17\1\103\14\17\16\0\7\17\1\104\11\17\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1364];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\3\11\1\1\5\11\15\1\1\11"+
    "\14\1\1\0\1\1\1\11\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private Symbol sym(int type)
	{
		return sym(type, yytext());
	}

	private Symbol sym(int type, Object value)
	{
		return new Symbol(type, yyline, yycolumn, value);
	}

	private void error()
	throws IOException
	{
		throw new IOException("illegal text at line = "+yyline+", column = "+yycolumn+", text = '"+yytext()+"'");
	}
	
	private int currentSymbol;
	private boolean done = false;
	private StringBuffer buffer = new StringBuffer();
	
	public int getCurrentSymbol(){
		return currentSymbol;
	}
	
	public int getColumn(){
		return yycolumn + 1;
	}
	
	public int getLine(){
		return yyline + 1;
	}
	
	public boolean getNextSymbol(){
		Symbol s;
		String token;
		
		if(done){
			currentSymbol = EOF;
			return true;
		}
		
		try {
			s = next_token();
			currentSymbol = s.sym;
			if(s.sym == EOF){
				done = true;
				token = ""+FileManager.EOF;
			} else {
				token = s.value.toString();
			}
			currentSymbol = SymbolTable.getInstance().classifySymbol(token);
			if (currentSymbol <= Symbols.NULL_SYMBOL)
				currentSymbol = SymbolTable.getInstance().insertUserSymbol(token);
				
			scannerDebugOutTokenSymbol(token, currentSymbol);
		} catch (IOException e) {
			done = true;
			e.printStackTrace();
		}

		return true;
	}
	
	public void skipToDelimiter(){
		while(this.getNextSymbol()){
			if(currentSymbol == Symbols.DELIMITER_SYMBOL || currentSymbol == Symbols.EOF)
				break;
			scannerDebugOutText("Skipping...");
			scannerDebugOutTokenSymbol(yytext(), currentSymbol);
		}
	}
	
	public void skipBlockEndSymbol(){
		while(this.getNextSymbol()){
			if(currentSymbol == Symbols.EOF || currentSymbol == Symbols.END_SYMBOL)
				break;
				
			scannerDebugOutText("Skipping...");
			scannerDebugOutTokenSymbol(yytext(), currentSymbol);
		}
	}
	
	public int lookAheadOneSymbol(){
		return 0;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ScannerJFlex(java.io.Reader in) {
  	// TODO: code that goes to constructor

	FileManager.getInstance().getEchofile().echoWriteLine("Used scanner: [generated] ScannerJFlex.java\n");
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ScannerJFlex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { buffer.append(yytext()); return sym(OR_SYMBOL, "OR");
          }
        case 27: break;
        case 17: 
          { buffer.append(yytext()); return sym(INLINE_IF_SYMBOL, "IIF");
          }
        case 28: break;
        case 16: 
          { buffer.append(yytext()); return sym(END_SYMBOL, "END");
          }
        case 29: break;
        case 11: 
          { buffer.append(yytext()); return sym(INTEGER_LITERAL, new Integer(yytext()));
          }
        case 30: break;
        case 15: 
          { /* ignored */
							FileManager.getInstance().getEchofile().echoWriteLineNr(yyline+1); 
							FileManager.getInstance().getEchofile().echoWriteLine(yytext().substring(0, yytext().length()-1));
							buffer = new StringBuffer();
          }
        case 31: break;
        case 3: 
          { buffer.append(yytext()); return sym(DELIMITER_SYMBOL, ";");
          }
        case 32: break;
        case 19: 
          { buffer.append(yytext()); return sym(INLINE_FI_SYMBOL, "FII");
          }
        case 33: break;
        case 24: 
          { buffer.append(yytext()); return sym(WRITE_SYMBOL, "WRITE");
          }
        case 34: break;
        case 21: 
          { buffer.append(yytext()); return sym(TRUE_SYMBOL, "TRUE");
          }
        case 35: break;
        case 1: 
          { error();
          }
        case 36: break;
        case 12: 
          { /* ignored */ 
							buffer.append(yytext());
          }
        case 37: break;
        case 13: 
          { buffer.append(yytext()); return sym(ASSIGN_SYMBOL, ":=");
          }
        case 38: break;
        case 4: 
          { buffer.append(yytext()); return sym(COMMA_SYMBOL, ",");
          }
        case 39: break;
        case 23: 
          { buffer.append(yytext()); return sym(FALSE_SYMBOL, "FALSE");
          }
        case 40: break;
        case 22: 
          { buffer.append(yytext()); return sym(BEGIN_SYMBOL, "BEGIN");
          }
        case 41: break;
        case 10: 
          { buffer.append(yytext());
							return sym(STRING_LITERAL, yytext());
          }
        case 42: break;
        case 2: 
          { /* ignored */  
							FileManager.getInstance().getEchofile().echoWriteLineNr(yyline+1);
							FileManager.getInstance().getEchofile().echoWriteLine(buffer.toString());
							buffer = new StringBuffer();
          }
        case 43: break;
        case 18: 
          { buffer.append(yytext()); return sym(AND_SYMBOL, "AND");
          }
        case 44: break;
        case 7: 
          { buffer.append(yytext()); return sym(TIMES_SYMBOL, "*");
          }
        case 45: break;
        case 8: 
          { buffer.append(yytext()); return sym(DIVIDE_SYMBOL, "/");
          }
        case 46: break;
        case 25: 
          { buffer.append(yytext()); return sym(BOOL_TYPE_SYMBOL, "BOOL");
          }
        case 47: break;
        case 9: 
          { buffer.append(yytext()); return sym(MODULO_SYMBOL, "%");
          }
        case 48: break;
        case 5: 
          { buffer.append(yytext()); return sym(MINUS_SYMBOL, "-");
          }
        case 49: break;
        case 26: 
          { buffer.append(yytext()); return sym(INT_TYPE_SYMBOL, "INTEGER");
          }
        case 50: break;
        case 6: 
          { buffer.append(yytext()); return sym(PLUS_SYMBOL, "+");
          }
        case 51: break;
        case 20: 
          { buffer.append(yytext()); return sym(READ_SYMBOL, "READ");
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                FileManager.getInstance().getEchofile().echoWriteLineNr(yyline+1);
							FileManager.getInstance().getEchofile().echoWriteLine(buffer.toString()+"\n");
							return sym(EOF, null);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface symboltable.Symbols
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = symboltable.Symbols.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ScannerJFlex <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        ScannerJFlex scanner = null;
        try {
          scanner = new ScannerJFlex( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}

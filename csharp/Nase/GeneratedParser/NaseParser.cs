// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.4.5
// Machine:  DARKONE-L
// DateTime: 02.12.2011 23:58:39
// UserName: darkone
// Input file <NaseParser.y - 02.12.2011 23:58:35>

// options: lines

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Nase.Files;
using Nase.Syntax;

namespace Nase.GeneratedParser
{
public enum Symbol {
    error=1,EOF=2,NULL_SYMBOL=3,BEGIN_SYMBOL=4,END_SYMBOL=5,DELIMITER_SYMBOL=6,
    COMMA_SYMBOL=7,INT_TYPE_SYMBOL=8,BOOL_TYPE_SYMBOL=9,READ_SYMBOL=10,WRITE_SYMBOL=11,IF_SYMBOL=12,
    THEN_SYMBOL=13,ELSE_SYMBOL=14,WHILE_SYMBOL=15,DO_SYMBOL=16,FOR_SYMBOL=17,ASSIGN_SYMBOL=18,
    OPEN_PARENTHESIS_SYMBOL=19,CLOSE_PARENTHESIS_SYMBOL=20,INLINE_IF_SYMBOL=21,INLINE_THEN_SYMBOL=22,INLINE_ELSE_SYMBOL=23,INLINE_FI_SYMBOL=24,
    PLUS_SYMBOL=25,MINUS_SYMBOL=26,TIMES_SYMBOL=27,DIVIDE_SYMBOL=28,MODULO_SYMBOL=29,LT_SYMBOL=30,
    LE_SYMBOL=31,EQ_SYMBOL=32,GE_SYMBOL=33,GT_SYMBOL=34,NE_SYMBOL=35,AND_SYMBOL=36,
    OR_SYMBOL=37,NOT_SYMBOL=38,TRUE_SYMBOL=39,FALSE_SYMBOL=40,IDENTIFIER_SYMBOL=41,INTEGER_LITERAL_SYMBOL=42};

public partial struct ValueType
#line 9 "NaseParser.y"
{ public Symbol symbol;
#line 10 "NaseParser.y"
         public string identName;
#line 11 "NaseParser.y"
         public SyntaxTreeNode node;
#line 12 "NaseParser.y"
         public List<string> identList; }
public partial class NaseParser: ShiftReduceParser<ValueType, FilePosition>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[69];
  private static State[] states = new State[128];
  private static string[] nonTerms = new string[] {
      "program", "declarationSequence", "blockSequence", "block", "statementSequence", 
      "statement", "declaration", "declarationRec", "assignment", "read", "write", 
      "typeName", "intExpr", "intTerm", "intTermSecondary", "intFactor", "boolExpr", 
      "boolTerm", "boolTermSecondary", "boolFactor", "comparisonExpr", "inlineIfStatement", 
      "ifStatement", "whileStatement", "forStatement", "identifier", "integer", 
      "$accept", "blockBegin", "blockEnd", };

  static NaseParser() {
    states[0] = new State(new int[]{8,23,9,24,4,26},new int[]{-1,1,-2,3,-7,123,-12,17,-3,126,-4,6,-29,8});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{4,26},new int[]{-3,4,-4,6,-29,8});
    states[4] = new State(new int[]{2,5});
    states[5] = new State(-2);
    states[6] = new State(new int[]{4,26,2,-7},new int[]{-3,7,-4,6,-29,8});
    states[7] = new State(-6);
    states[8] = new State(new int[]{8,23,9,24,4,26,41,46,10,95,11,99,12,103,15,110,17,115},new int[]{-5,9,-6,13,-7,15,-12,17,-4,25,-29,8,-9,27,-26,29,-10,93,-11,97,-23,102,-24,109,-25,114});
    states[9] = new State(new int[]{5,12},new int[]{-30,10});
    states[10] = new State(new int[]{6,11});
    states[11] = new State(-8);
    states[12] = new State(-10);
    states[13] = new State(new int[]{8,23,9,24,4,26,41,46,10,95,11,99,12,103,15,110,17,115,5,-12},new int[]{-5,14,-6,13,-7,15,-12,17,-4,25,-29,8,-9,27,-26,29,-10,93,-11,97,-23,102,-24,109,-25,114});
    states[14] = new State(-11);
    states[15] = new State(new int[]{6,16});
    states[16] = new State(-13);
    states[17] = new State(new int[]{41,18});
    states[18] = new State(new int[]{7,20,6,-22},new int[]{-8,19});
    states[19] = new State(-21);
    states[20] = new State(new int[]{41,21});
    states[21] = new State(new int[]{7,20,6,-24},new int[]{-8,22});
    states[22] = new State(-23);
    states[23] = new State(-25);
    states[24] = new State(-26);
    states[25] = new State(-14);
    states[26] = new State(-9);
    states[27] = new State(new int[]{6,28});
    states[28] = new State(-15);
    states[29] = new State(new int[]{18,30});
    states[30] = new State(new int[]{26,37,42,44,41,46,19,81,21,51,38,61,39,66,40,67},new int[]{-13,31,-17,92,-14,34,-15,42,-16,39,-27,43,-26,80,-22,50,-18,58,-19,85,-20,63,-21,68});
    states[31] = new State(new int[]{30,32,31,70,32,72,33,74,34,76,35,78,6,-27,7,-27,16,-27});
    states[32] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-13,33,-14,34,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[33] = new State(-54);
    states[34] = new State(new int[]{25,35,26,90,30,-31,31,-31,32,-31,33,-31,34,-31,35,-31,6,-31,7,-31,16,-31,36,-31,37,-31,22,-31,20,-31,13,-31,23,-31,24,-31});
    states[35] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-13,36,-14,34,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[36] = new State(-29);
    states[37] = new State(new int[]{42,44,41,46,19,47,21,51},new int[]{-15,38,-16,39,-27,43,-26,45,-22,50});
    states[38] = new State(-32);
    states[39] = new State(new int[]{27,40,28,86,29,88,25,-37,26,-37,30,-37,31,-37,32,-37,33,-37,34,-37,35,-37,6,-37,7,-37,16,-37,36,-37,37,-37,22,-37,20,-37,13,-37,23,-37,24,-37});
    states[40] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-14,41,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[41] = new State(-34);
    states[42] = new State(-33);
    states[43] = new State(-38);
    states[44] = new State(-61);
    states[45] = new State(-39);
    states[46] = new State(-60);
    states[47] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-13,48,-14,34,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[48] = new State(new int[]{20,49});
    states[49] = new State(-40);
    states[50] = new State(-41);
    states[51] = new State(new int[]{38,61,39,66,40,67,26,37,42,44,41,46,19,81,21,51},new int[]{-17,52,-18,58,-19,85,-20,63,-21,68,-13,69,-14,34,-15,42,-16,39,-27,43,-26,80,-22,50});
    states[52] = new State(new int[]{22,53});
    states[53] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-13,54,-14,34,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[54] = new State(new int[]{23,55});
    states[55] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-13,56,-14,34,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[56] = new State(new int[]{24,57});
    states[57] = new State(-42);
    states[58] = new State(new int[]{37,59,6,-44,7,-44,16,-44,22,-44,20,-44,13,-44});
    states[59] = new State(new int[]{38,61,39,66,40,67,26,37,42,44,41,46,19,81,21,51},new int[]{-17,60,-18,58,-19,85,-20,63,-21,68,-13,69,-14,34,-15,42,-16,39,-27,43,-26,80,-22,50});
    states[60] = new State(-43);
    states[61] = new State(new int[]{39,66,40,67,26,37,42,44,41,46,19,81,21,51},new int[]{-19,62,-20,63,-21,68,-13,69,-14,34,-15,42,-16,39,-27,43,-26,80,-22,50});
    states[62] = new State(-45);
    states[63] = new State(new int[]{36,64,37,-48,6,-48,7,-48,16,-48,22,-48,20,-48,13,-48});
    states[64] = new State(new int[]{39,66,40,67,26,37,42,44,41,46,19,81,21,51},new int[]{-19,65,-20,63,-21,68,-13,69,-14,34,-15,42,-16,39,-27,43,-26,80,-22,50});
    states[65] = new State(-47);
    states[66] = new State(-49);
    states[67] = new State(-50);
    states[68] = new State(-51);
    states[69] = new State(new int[]{30,32,31,70,32,72,33,74,34,76,35,78});
    states[70] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-13,71,-14,34,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[71] = new State(-55);
    states[72] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-13,73,-14,34,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[73] = new State(-56);
    states[74] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-13,75,-14,34,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[75] = new State(-57);
    states[76] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-13,77,-14,34,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[77] = new State(-58);
    states[78] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-13,79,-14,34,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[79] = new State(-59);
    states[80] = new State(new int[]{27,-39,28,-39,29,-39,25,-39,26,-39,30,-39,31,-39,32,-39,33,-39,34,-39,35,-39,6,-39,7,-39,16,-39,20,-39,36,-52,37,-52,22,-52,13,-52});
    states[81] = new State(new int[]{26,37,42,44,41,46,19,81,21,51,38,61,39,66,40,67},new int[]{-13,82,-17,83,-14,34,-15,42,-16,39,-27,43,-26,80,-22,50,-18,58,-19,85,-20,63,-21,68});
    states[82] = new State(new int[]{20,49,30,32,31,70,32,72,33,74,34,76,35,78});
    states[83] = new State(new int[]{20,84});
    states[84] = new State(-53);
    states[85] = new State(-46);
    states[86] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-14,87,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[87] = new State(-35);
    states[88] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-14,89,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[89] = new State(-36);
    states[90] = new State(new int[]{26,37,42,44,41,46,19,47,21,51},new int[]{-13,91,-14,34,-15,42,-16,39,-27,43,-26,45,-22,50});
    states[91] = new State(-30);
    states[92] = new State(-28);
    states[93] = new State(new int[]{6,94});
    states[94] = new State(-16);
    states[95] = new State(new int[]{41,46},new int[]{-26,96});
    states[96] = new State(-62);
    states[97] = new State(new int[]{6,98});
    states[98] = new State(-17);
    states[99] = new State(new int[]{26,37,42,44,41,46,19,81,21,51,38,61,39,66,40,67},new int[]{-13,100,-17,101,-14,34,-15,42,-16,39,-27,43,-26,80,-22,50,-18,58,-19,85,-20,63,-21,68});
    states[100] = new State(new int[]{30,32,31,70,32,72,33,74,34,76,35,78,6,-63});
    states[101] = new State(-64);
    states[102] = new State(-18);
    states[103] = new State(new int[]{38,61,39,66,40,67,26,37,42,44,41,46,19,81,21,51},new int[]{-17,104,-18,58,-19,85,-20,63,-21,68,-13,69,-14,34,-15,42,-16,39,-27,43,-26,80,-22,50});
    states[104] = new State(new int[]{13,105});
    states[105] = new State(new int[]{8,23,9,24,4,26,41,46,10,95,11,99,12,103,15,110,17,115},new int[]{-6,106,-7,15,-12,17,-4,25,-29,8,-9,27,-26,29,-10,93,-11,97,-23,102,-24,109,-25,114});
    states[106] = new State(new int[]{14,107,8,-66,9,-66,4,-66,41,-66,10,-66,11,-66,12,-66,15,-66,17,-66,5,-66});
    states[107] = new State(new int[]{8,23,9,24,4,26,41,46,10,95,11,99,12,103,15,110,17,115},new int[]{-6,108,-7,15,-12,17,-4,25,-29,8,-9,27,-26,29,-10,93,-11,97,-23,102,-24,109,-25,114});
    states[108] = new State(-65);
    states[109] = new State(-19);
    states[110] = new State(new int[]{38,61,39,66,40,67,26,37,42,44,41,46,19,81,21,51},new int[]{-17,111,-18,58,-19,85,-20,63,-21,68,-13,69,-14,34,-15,42,-16,39,-27,43,-26,80,-22,50});
    states[111] = new State(new int[]{16,112});
    states[112] = new State(new int[]{8,23,9,24,4,26,41,46,10,95,11,99,12,103,15,110,17,115},new int[]{-6,113,-7,15,-12,17,-4,25,-29,8,-9,27,-26,29,-10,93,-11,97,-23,102,-24,109,-25,114});
    states[113] = new State(-67);
    states[114] = new State(-20);
    states[115] = new State(new int[]{41,46},new int[]{-9,116,-26,29});
    states[116] = new State(new int[]{7,117});
    states[117] = new State(new int[]{38,61,39,66,40,67,26,37,42,44,41,46,19,81,21,51},new int[]{-17,118,-18,58,-19,85,-20,63,-21,68,-13,69,-14,34,-15,42,-16,39,-27,43,-26,80,-22,50});
    states[118] = new State(new int[]{7,119});
    states[119] = new State(new int[]{41,46},new int[]{-9,120,-26,29});
    states[120] = new State(new int[]{16,121});
    states[121] = new State(new int[]{8,23,9,24,4,26,41,46,10,95,11,99,12,103,15,110,17,115},new int[]{-6,122,-7,15,-12,17,-4,25,-29,8,-9,27,-26,29,-10,93,-11,97,-23,102,-24,109,-25,114});
    states[122] = new State(-68);
    states[123] = new State(new int[]{6,124});
    states[124] = new State(new int[]{8,23,9,24,4,-5},new int[]{-2,125,-7,123,-12,17});
    states[125] = new State(-4);
    states[126] = new State(new int[]{2,127});
    states[127] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-28, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-2,-3,2});
    rules[3] = new Rule(-1, new int[]{-3,2});
    rules[4] = new Rule(-2, new int[]{-7,6,-2});
    rules[5] = new Rule(-2, new int[]{-7,6});
    rules[6] = new Rule(-3, new int[]{-4,-3});
    rules[7] = new Rule(-3, new int[]{-4});
    rules[8] = new Rule(-4, new int[]{-29,-5,-30,6});
    rules[9] = new Rule(-29, new int[]{4});
    rules[10] = new Rule(-30, new int[]{5});
    rules[11] = new Rule(-5, new int[]{-6,-5});
    rules[12] = new Rule(-5, new int[]{-6});
    rules[13] = new Rule(-6, new int[]{-7,6});
    rules[14] = new Rule(-6, new int[]{-4});
    rules[15] = new Rule(-6, new int[]{-9,6});
    rules[16] = new Rule(-6, new int[]{-10,6});
    rules[17] = new Rule(-6, new int[]{-11,6});
    rules[18] = new Rule(-6, new int[]{-23});
    rules[19] = new Rule(-6, new int[]{-24});
    rules[20] = new Rule(-6, new int[]{-25});
    rules[21] = new Rule(-7, new int[]{-12,41,-8});
    rules[22] = new Rule(-7, new int[]{-12,41});
    rules[23] = new Rule(-8, new int[]{7,41,-8});
    rules[24] = new Rule(-8, new int[]{7,41});
    rules[25] = new Rule(-12, new int[]{8});
    rules[26] = new Rule(-12, new int[]{9});
    rules[27] = new Rule(-9, new int[]{-26,18,-13});
    rules[28] = new Rule(-9, new int[]{-26,18,-17});
    rules[29] = new Rule(-13, new int[]{-14,25,-13});
    rules[30] = new Rule(-13, new int[]{-14,26,-13});
    rules[31] = new Rule(-13, new int[]{-14});
    rules[32] = new Rule(-14, new int[]{26,-15});
    rules[33] = new Rule(-14, new int[]{-15});
    rules[34] = new Rule(-15, new int[]{-16,27,-14});
    rules[35] = new Rule(-15, new int[]{-16,28,-14});
    rules[36] = new Rule(-15, new int[]{-16,29,-14});
    rules[37] = new Rule(-15, new int[]{-16});
    rules[38] = new Rule(-16, new int[]{-27});
    rules[39] = new Rule(-16, new int[]{-26});
    rules[40] = new Rule(-16, new int[]{19,-13,20});
    rules[41] = new Rule(-16, new int[]{-22});
    rules[42] = new Rule(-22, new int[]{21,-17,22,-13,23,-13,24});
    rules[43] = new Rule(-17, new int[]{-18,37,-17});
    rules[44] = new Rule(-17, new int[]{-18});
    rules[45] = new Rule(-18, new int[]{38,-19});
    rules[46] = new Rule(-18, new int[]{-19});
    rules[47] = new Rule(-19, new int[]{-20,36,-19});
    rules[48] = new Rule(-19, new int[]{-20});
    rules[49] = new Rule(-20, new int[]{39});
    rules[50] = new Rule(-20, new int[]{40});
    rules[51] = new Rule(-20, new int[]{-21});
    rules[52] = new Rule(-20, new int[]{-26});
    rules[53] = new Rule(-20, new int[]{19,-17,20});
    rules[54] = new Rule(-21, new int[]{-13,30,-13});
    rules[55] = new Rule(-21, new int[]{-13,31,-13});
    rules[56] = new Rule(-21, new int[]{-13,32,-13});
    rules[57] = new Rule(-21, new int[]{-13,33,-13});
    rules[58] = new Rule(-21, new int[]{-13,34,-13});
    rules[59] = new Rule(-21, new int[]{-13,35,-13});
    rules[60] = new Rule(-26, new int[]{41});
    rules[61] = new Rule(-27, new int[]{42});
    rules[62] = new Rule(-10, new int[]{10,-26});
    rules[63] = new Rule(-11, new int[]{11,-13});
    rules[64] = new Rule(-11, new int[]{11,-17});
    rules[65] = new Rule(-23, new int[]{12,-17,13,-6,14,-6});
    rules[66] = new Rule(-23, new int[]{12,-17,13,-6});
    rules[67] = new Rule(-24, new int[]{15,-17,16,-6});
    rules[68] = new Rule(-25, new int[]{17,-9,7,-17,7,-9,16,-6});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Symbol.error, (int)Symbol.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> declarationSequence, blockSequence, EOF
#line 71 "NaseParser.y"
{
#line 72 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeProgramNode(CurrentLocationSpan, new SyntaxTreeSequenceNode(LocationStack[LocationStack.Depth-3], ValueStack[ValueStack.Depth-3].node, new SyntaxTreeSequenceNode(LocationStack[LocationStack.Depth-2], ValueStack[ValueStack.Depth-2].node, null)));
#line 73 "NaseParser.y"
                SyntaxTree = new SyntaxTree(CurrentSemanticValue.node);
#line 74 "NaseParser.y"
            }
        break;
      case 3: // program -> blockSequence, EOF
#line 76 "NaseParser.y"
{
#line 77 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeProgramNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].node);
#line 78 "NaseParser.y"
                SyntaxTree = new SyntaxTree(CurrentSemanticValue.node);
#line 79 "NaseParser.y"
            }
        break;
      case 4: // declarationSequence -> declaration, DELIMITER_SYMBOL, declarationSequence
#line 84 "NaseParser.y"
{
#line 85 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 86 "NaseParser.y"
            }
        break;
      case 5: // declarationSequence -> declaration, DELIMITER_SYMBOL
#line 88 "NaseParser.y"
{
#line 89 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].node, null);
#line 90 "NaseParser.y"
            }
        break;
      case 6: // blockSequence -> block, blockSequence
#line 95 "NaseParser.y"
{
#line 96 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].node, ValueStack[ValueStack.Depth-1].node);
#line 97 "NaseParser.y"
            }
        break;
      case 7: // blockSequence -> block
#line 99 "NaseParser.y"
{
#line 100 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].node, null);
#line 101 "NaseParser.y"
            }
        break;
      case 8: // block -> blockBegin, statementSequence, blockEnd, DELIMITER_SYMBOL
#line 106 "NaseParser.y"
{
#line 107 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-3].node;
#line 108 "NaseParser.y"
            }
        break;
      case 9: // blockBegin -> BEGIN_SYMBOL
#line 113 "NaseParser.y"
{
#line 114 "NaseParser.y"
                this._symbolTable.AddNestingLevel();
#line 115 "NaseParser.y"
            }
        break;
      case 10: // blockEnd -> END_SYMBOL
#line 120 "NaseParser.y"
{
#line 121 "NaseParser.y"
                this._symbolTable.RemoveNestingLevel();
#line 122 "NaseParser.y"
            }
        break;
      case 11: // statementSequence -> statement, statementSequence
#line 127 "NaseParser.y"
{
#line 128 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].node, ValueStack[ValueStack.Depth-1].node);
#line 129 "NaseParser.y"
            }
        break;
      case 12: // statementSequence -> statement
#line 131 "NaseParser.y"
{
#line 132 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].node, null);
#line 133 "NaseParser.y"
            }
        break;
      case 13: // statement -> declaration, DELIMITER_SYMBOL
#line 138 "NaseParser.y"
{
#line 139 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;
#line 140 "NaseParser.y"
            }
        break;
      case 14: // statement -> block
#line 142 "NaseParser.y"
{
#line 143 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 144 "NaseParser.y"
            }
        break;
      case 15: // statement -> assignment, DELIMITER_SYMBOL
#line 146 "NaseParser.y"
{
#line 147 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;
#line 148 "NaseParser.y"
            }
        break;
      case 16: // statement -> read, DELIMITER_SYMBOL
#line 150 "NaseParser.y"
{
#line 151 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;
#line 152 "NaseParser.y"
            }
        break;
      case 17: // statement -> write, DELIMITER_SYMBOL
#line 154 "NaseParser.y"
{
#line 155 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;
#line 156 "NaseParser.y"
            }
        break;
      case 18: // statement -> ifStatement
#line 158 "NaseParser.y"
{
#line 159 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 160 "NaseParser.y"
            }
        break;
      case 19: // statement -> whileStatement
#line 162 "NaseParser.y"
{
#line 163 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 164 "NaseParser.y"
            }
        break;
      case 20: // statement -> forStatement
#line 166 "NaseParser.y"
{
#line 167 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 168 "NaseParser.y"
            }
        break;
      case 21: // declaration -> typeName, IDENTIFIER_SYMBOL, declarationRec
#line 173 "NaseParser.y"
{
#line 174 "NaseParser.y"
                SyntaxTreeDeclarationNode declNode = null;
#line 175 "NaseParser.y"
                SyntaxTreeSequenceNode seqNode = null;
#line 176 "NaseParser.y"

#line 177 "NaseParser.y"
                Symbol symbol = this._symbolTable.AddUserSymbol(ValueStack[ValueStack.Depth-2].identName);
#line 178 "NaseParser.y"
                var firstDeclNode = new SyntaxTreeDeclarationNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].node, symbol);
#line 179 "NaseParser.y"
                this._symbolTable.SetDeclarationNodeLinkToSymbol(symbol, firstDeclNode);
#line 180 "NaseParser.y"

#line 181 "NaseParser.y"
                foreach(string s in ValueStack[ValueStack.Depth-1].identList)
#line 182 "NaseParser.y"
                {
#line 183 "NaseParser.y"
                    symbol = this._symbolTable.AddUserSymbol(s);
#line 184 "NaseParser.y"
                    declNode = new SyntaxTreeDeclarationNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].node, symbol);
#line 185 "NaseParser.y"
                    this._symbolTable.SetDeclarationNodeLinkToSymbol(symbol, declNode);
#line 186 "NaseParser.y"
                    seqNode = new SyntaxTreeSequenceNode(CurrentLocationSpan, declNode, seqNode);
#line 187 "NaseParser.y"
                }
#line 188 "NaseParser.y"

#line 189 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeSequenceNode(CurrentLocationSpan, firstDeclNode, seqNode);
#line 190 "NaseParser.y"
            }
        break;
      case 22: // declaration -> typeName, IDENTIFIER_SYMBOL
#line 192 "NaseParser.y"
{
#line 193 "NaseParser.y"
                Symbol symbol = this._symbolTable.AddUserSymbol(ValueStack[ValueStack.Depth-1].identName);
#line 194 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDeclarationNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].node, symbol);
#line 195 "NaseParser.y"
                this._symbolTable.SetDeclarationNodeLinkToSymbol(symbol, CurrentSemanticValue.node);
#line 196 "NaseParser.y"
            }
        break;
      case 23: // declarationRec -> COMMA_SYMBOL, IDENTIFIER_SYMBOL, declarationRec
#line 201 "NaseParser.y"
{
#line 202 "NaseParser.y"
                CurrentSemanticValue.identList = ValueStack[ValueStack.Depth-1].identList;
#line 203 "NaseParser.y"
                CurrentSemanticValue.identList.Add(ValueStack[ValueStack.Depth-2].identName);
#line 204 "NaseParser.y"
            }
        break;
      case 24: // declarationRec -> COMMA_SYMBOL, IDENTIFIER_SYMBOL
#line 206 "NaseParser.y"
{
#line 207 "NaseParser.y"
                CurrentSemanticValue.identList = new List<string>();
#line 208 "NaseParser.y"
                CurrentSemanticValue.identList.Add(ValueStack[ValueStack.Depth-1].identName);
#line 209 "NaseParser.y"
            }
        break;
      case 25: // typeName -> INT_TYPE_SYMBOL
#line 214 "NaseParser.y"
{
#line 215 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeTypeNode(CurrentLocationSpan, Symbol.INT_TYPE_SYMBOL);
#line 216 "NaseParser.y"
            }
        break;
      case 26: // typeName -> BOOL_TYPE_SYMBOL
#line 218 "NaseParser.y"
{
#line 219 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeTypeNode(CurrentLocationSpan, Symbol.BOOL_TYPE_SYMBOL);
#line 220 "NaseParser.y"
            }
        break;
      case 27: // assignment -> identifier, ASSIGN_SYMBOL, intExpr
#line 225 "NaseParser.y"
{
#line 226 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeAssignmentNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 227 "NaseParser.y"
            }
        break;
      case 28: // assignment -> identifier, ASSIGN_SYMBOL, boolExpr
#line 229 "NaseParser.y"
{
#line 230 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeAssignmentNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 231 "NaseParser.y"
            }
        break;
      case 29: // intExpr -> intTerm, PLUS_SYMBOL, intExpr
#line 236 "NaseParser.y"
{
#line 237 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.PLUS_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 238 "NaseParser.y"
            }
        break;
      case 30: // intExpr -> intTerm, MINUS_SYMBOL, intExpr
#line 240 "NaseParser.y"
{
#line 241 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.MINUS_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 242 "NaseParser.y"
            }
        break;
      case 31: // intExpr -> intTerm
#line 244 "NaseParser.y"
{
#line 245 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 246 "NaseParser.y"
            }
        break;
      case 32: // intTerm -> MINUS_SYMBOL, intTermSecondary
#line 251 "NaseParser.y"
{
#line 252 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeMonadicOpNode(CurrentLocationSpan, Symbol.MINUS_SYMBOL, ValueStack[ValueStack.Depth-1].node);
#line 253 "NaseParser.y"
            }
        break;
      case 33: // intTerm -> intTermSecondary
#line 255 "NaseParser.y"
{
#line 256 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 257 "NaseParser.y"
            }
        break;
      case 34: // intTermSecondary -> intFactor, TIMES_SYMBOL, intTerm
#line 262 "NaseParser.y"
{
#line 263 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.TIMES_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 264 "NaseParser.y"
            }
        break;
      case 35: // intTermSecondary -> intFactor, DIVIDE_SYMBOL, intTerm
#line 266 "NaseParser.y"
{
#line 267 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.DIVIDE_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 268 "NaseParser.y"
            }
        break;
      case 36: // intTermSecondary -> intFactor, MODULO_SYMBOL, intTerm
#line 270 "NaseParser.y"
{
#line 271 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.MODULO_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 272 "NaseParser.y"
            }
        break;
      case 37: // intTermSecondary -> intFactor
#line 274 "NaseParser.y"
{
#line 275 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 276 "NaseParser.y"
            }
        break;
      case 38: // intFactor -> integer
#line 281 "NaseParser.y"
{
#line 282 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 283 "NaseParser.y"
            }
        break;
      case 39: // intFactor -> identifier
#line 285 "NaseParser.y"
{
#line 286 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 287 "NaseParser.y"
            }
        break;
      case 40: // intFactor -> OPEN_PARENTHESIS_SYMBOL, intExpr, CLOSE_PARENTHESIS_SYMBOL
#line 289 "NaseParser.y"
{
#line 290 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;
#line 291 "NaseParser.y"
            }
        break;
      case 41: // intFactor -> inlineIfStatement
#line 293 "NaseParser.y"
{
#line 294 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 295 "NaseParser.y"
            }
        break;
      case 42: // inlineIfStatement -> INLINE_IF_SYMBOL, boolExpr, INLINE_THEN_SYMBOL, intExpr, 
               //                      INLINE_ELSE_SYMBOL, intExpr, INLINE_FI_SYMBOL
#line 300 "NaseParser.y"
{
#line 301 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeInlineIfNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-6].node, ValueStack[ValueStack.Depth-4].node, ValueStack[ValueStack.Depth-2].node);
#line 302 "NaseParser.y"
            }
        break;
      case 43: // boolExpr -> boolTerm, OR_SYMBOL, boolExpr
#line 307 "NaseParser.y"
{
#line 308 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.OR_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 309 "NaseParser.y"
            }
        break;
      case 44: // boolExpr -> boolTerm
#line 311 "NaseParser.y"
{
#line 312 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 313 "NaseParser.y"
            }
        break;
      case 45: // boolTerm -> NOT_SYMBOL, boolTermSecondary
#line 318 "NaseParser.y"
{
#line 319 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeMonadicOpNode(CurrentLocationSpan, Symbol.NOT_SYMBOL, ValueStack[ValueStack.Depth-1].node);
#line 320 "NaseParser.y"
            }
        break;
      case 46: // boolTerm -> boolTermSecondary
#line 322 "NaseParser.y"
{
#line 323 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 324 "NaseParser.y"
            }
        break;
      case 47: // boolTermSecondary -> boolFactor, AND_SYMBOL, boolTermSecondary
#line 329 "NaseParser.y"
{
#line 330 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.AND_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 331 "NaseParser.y"
            }
        break;
      case 48: // boolTermSecondary -> boolFactor
#line 333 "NaseParser.y"
{
#line 334 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 335 "NaseParser.y"
            }
        break;
      case 49: // boolFactor -> TRUE_SYMBOL
#line 340 "NaseParser.y"
{
#line 341 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeConstNode(CurrentLocationSpan, Symbol.TRUE_SYMBOL);
#line 342 "NaseParser.y"
            }
        break;
      case 50: // boolFactor -> FALSE_SYMBOL
#line 344 "NaseParser.y"
{
#line 345 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeConstNode(CurrentLocationSpan, Symbol.FALSE_SYMBOL);
#line 346 "NaseParser.y"
            }
        break;
      case 51: // boolFactor -> comparisonExpr
#line 348 "NaseParser.y"
{
#line 349 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 350 "NaseParser.y"
            }
        break;
      case 52: // boolFactor -> identifier
#line 352 "NaseParser.y"
{
#line 353 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;
#line 354 "NaseParser.y"
            }
        break;
      case 53: // boolFactor -> OPEN_PARENTHESIS_SYMBOL, boolExpr, CLOSE_PARENTHESIS_SYMBOL
#line 356 "NaseParser.y"
{
#line 357 "NaseParser.y"
                CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;
#line 358 "NaseParser.y"
            }
        break;
      case 54: // comparisonExpr -> intExpr, LT_SYMBOL, intExpr
#line 363 "NaseParser.y"
{
#line 364 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.LT_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 365 "NaseParser.y"
            }
        break;
      case 55: // comparisonExpr -> intExpr, LE_SYMBOL, intExpr
#line 367 "NaseParser.y"
{
#line 368 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.LE_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 369 "NaseParser.y"
            }
        break;
      case 56: // comparisonExpr -> intExpr, EQ_SYMBOL, intExpr
#line 371 "NaseParser.y"
{
#line 372 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.EQ_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 373 "NaseParser.y"
            }
        break;
      case 57: // comparisonExpr -> intExpr, GE_SYMBOL, intExpr
#line 375 "NaseParser.y"
{
#line 376 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.GE_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 377 "NaseParser.y"
            }
        break;
      case 58: // comparisonExpr -> intExpr, GT_SYMBOL, intExpr
#line 379 "NaseParser.y"
{
#line 380 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.GT_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 381 "NaseParser.y"
            }
        break;
      case 59: // comparisonExpr -> intExpr, NE_SYMBOL, intExpr
#line 383 "NaseParser.y"
{
#line 384 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeDyadicOpNode(CurrentLocationSpan, Symbol.NE_SYMBOL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 385 "NaseParser.y"
            }
        break;
      case 60: // identifier -> IDENTIFIER_SYMBOL
#line 390 "NaseParser.y"
{
#line 391 "NaseParser.y"
                Symbol symbol = this._symbolTable.ClassifySymbol(ValueStack[ValueStack.Depth-1].identName);
#line 392 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeIdentNode(CurrentLocationSpan, symbol);
#line 393 "NaseParser.y"
            }
        break;
      case 61: // integer -> INTEGER_LITERAL_SYMBOL
#line 398 "NaseParser.y"
{
#line 399 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeConstNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].symbol);
#line 400 "NaseParser.y"
                this._symbolTable.SetDeclarationNodeLinkToSymbol(ValueStack[ValueStack.Depth-1].symbol, CurrentSemanticValue.node);
#line 401 "NaseParser.y"
            }
        break;
      case 62: // read -> READ_SYMBOL, identifier
#line 406 "NaseParser.y"
{
#line 407 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeReadNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].node);
#line 408 "NaseParser.y"
            }
        break;
      case 63: // write -> WRITE_SYMBOL, intExpr
#line 413 "NaseParser.y"
{
#line 414 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeWriteNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].node);
#line 415 "NaseParser.y"
            }
        break;
      case 64: // write -> WRITE_SYMBOL, boolExpr
#line 417 "NaseParser.y"
{
#line 418 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeWriteNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].node);
#line 419 "NaseParser.y"
            }
        break;
      case 65: // ifStatement -> IF_SYMBOL, boolExpr, THEN_SYMBOL, statement, ELSE_SYMBOL, 
               //                statement
#line 424 "NaseParser.y"
{
#line 425 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeIfStatementNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-5].node, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 426 "NaseParser.y"
            }
        break;
      case 66: // ifStatement -> IF_SYMBOL, boolExpr, THEN_SYMBOL, statement
#line 428 "NaseParser.y"
{
#line 429 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeIfStatementNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node, null);
#line 430 "NaseParser.y"
            }
        break;
      case 67: // whileStatement -> WHILE_SYMBOL, boolExpr, DO_SYMBOL, statement
#line 435 "NaseParser.y"
{
#line 436 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeWhileStatementNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 437 "NaseParser.y"
            }
        break;
      case 68: // forStatement -> FOR_SYMBOL, assignment, COMMA_SYMBOL, boolExpr, COMMA_SYMBOL, 
               //                 assignment, DO_SYMBOL, statement
#line 442 "NaseParser.y"
{
#line 443 "NaseParser.y"
                CurrentSemanticValue.node = new SyntaxTreeForStatementNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-7].node, ValueStack[ValueStack.Depth-5].node, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node);
#line 444 "NaseParser.y"
            }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Symbol)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Symbol)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
